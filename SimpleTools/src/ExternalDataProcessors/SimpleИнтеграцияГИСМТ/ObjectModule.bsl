
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт
	
	МетаданныеОбработки = Метаданные();
	
	ВерсияБиблиотеки = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБиблиотеки);
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "0.2";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Наименование = МетаданныеОбработки.Представление();
	ПараметрыРегистрации.Информация = МетаданныеОбработки.Комментарий;
	
	ДобавитьКомандыОбработки(ПараметрыРегистрации);
	ДобавитьРазрешения(ПараметрыРегистрации);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения) Экспорт
	
	Попытка
		
		Если ИдентификаторКоманды = "ТестИнициализации" Тогда
			ВыполнитьТестИнициализации(ПараметрыВыполнения);
		ИначеЕсли ИдентификаторКоманды = "ПроверкаИспользованияКомандыЗапросСоставаКодовМаркировки" Тогда
			ПроверкаИспользованияКомандыЗапросСоставаКодовМаркировки(ПараметрыВыполнения);
		ИначеЕсли ИдентификаторКоманды = "ЗапросСоставаКодовМаркировки" Тогда
			ВыполнитьКомандуЗапросаСоставаКМ(ПараметрыВыполнения);
		ИначеЕсли ИдентификаторКоманды = "ПолучитьВложенныеШтрихкодыУпаковок" Тогда
			ВыполнитьКомандуПолучитьВложенныеШтрихкодыУпаковок(ПараметрыВыполнения);
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный идентификатор команд (%1)'"), ИдентификаторКоманды);
		КонецЕсли;
		
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияВнешнейОбработки

Процедура ДобавитьКомандыОбработки(ПараметрыРегистрации)
	
	// Команда ТестИнициализации
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Идентификатор = "ТестИнициализации";
	НоваяКоманда.Представление = НСтр("ru = 'Тест инициализации (для служебного использования)'");
	НоваяКоманда.Скрыть = Истина;
	
	// Команда ПроверкаИспользованияКомандыЗапросСоставаКодовМаркировки
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Идентификатор = "ПроверкаИспользованияКомандыЗапросСоставаКодовМаркировки";
	НоваяКоманда.Представление = НСтр("ru = 'Проверка зависимостей команды: Запрос состава кодов маркировки'");
	НоваяКоманда.Скрыть = Истина;
	
	// Команда ЗапросСоставаКодовМаркировки
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Идентификатор = "ЗапросСоставаКодовМаркировки";
	НоваяКоманда.Представление = НСтр("ru = 'Запрос состава кодов маркировки (для служебного использования)'");
	НоваяКоманда.Скрыть = Истина;
	
	// Команда ПолучитьВложенныеШтрихкодыУпаковок
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.Идентификатор = "ПолучитьВложенныеШтрихкодыУпаковок";
	НоваяКоманда.Представление = НСтр("ru = 'Получить вложенные штрихкоды упаковок (для служебного использования)'");
	НоваяКоманда.Скрыть = Истина;
	
КонецПроцедуры

Процедура ДобавитьРазрешения(ПараметрыРегистрации)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	// Разрешение на использование привилегированного режима
	ОписаниеРазрешения = НСтр("ru = 'Получение сертификатов электронной подписи в привилегированном режиме.'");
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеПривилегированногоРежима(ОписаниеРазрешения);
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	// Разрешение на использование интернет ресурса привилегированного режима markirovka.sandbox.crptech.ru
	ОписаниеРазрешения = НСтр("ru = 'Обращение к тестовому контуру честного знака.'");
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS", "markirovka.sandbox.crptech.ru", , ОписаниеРазрешения);
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	// Разрешение на использование интернет ресурса привилегированного режима markirovka.crpt.ru
	ОписаниеРазрешения = НСтр("ru = 'Обращение к продуктивному контуру честного знака.'");
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS", "markirovka.crpt.ru", , ОписаниеРазрешения);
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		
		Попытка
			МодульЭлектроннаяПодписьСлужебныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйКлиентСервер");
			ОписаниеКомпонентыЭЦП = МодульЭлектроннаяПодписьСлужебныйКлиентСервер.ОписаниеКомпоненты();
			ИмяМакетаКомпоненты = ОписаниеКомпонентыЭЦП.ПолноеИмяМакета;
		Исключение
			ИмяМакетаКомпоненты = "";
		КонецПопытки;

		Если ЗначениеЗаполнено(ИмяМакетаКомпоненты) Тогда
			ОписаниеРазрешения = НСтр("ru = 'Подписание авторизационных данных при обращении к ресурсам честного знака.'");
			Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеВнешнейКомпоненты(
				ИмяМакетаКомпоненты, ОписаниеРазрешения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЖурналРегистрации

Процедура ЗаписатьВЖурналРегистрации(Уровень, Комментарий)
	
	ИмяСобытия = "Simple. Интеграция Честный знак";
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, , , Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач Ошибка)
	
	Если ТипЗнч(Ошибка) = Тип("ИнформацияОбОшибке") Тогда
		Ошибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Ошибка);
	ИначеЕсли ТипЗнч(Ошибка) <> Тип("Строка") Тогда
		Ошибка = Строка(Ошибка);
	КонецЕсли;
	
	ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Ошибка, Ошибка);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрацию(Комментарий)
	
	ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Информация, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьПредупреждениеВЖурналРегистрацию(Комментарий)
	
	ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Предупреждение, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьПримечаниеВЖурналРегистрацию(Комментарий)
	
	ЗаписатьВЖурналРегистрации(УровеньЖурналаРегистрации.Примечание, Комментарий);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

Функция СвойствоСтруктуры(Знач Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если СтрНайти(Ключ, ".") > 0 Тогда
		
		КлючВСтруктуре = Лев(Ключ, СтрНайти(Ключ, ".") - 1);
		ОстатокКлюча = Сред(Ключ, СтрНайти(Ключ, ".") + 1);
		
		Результат = СвойствоСтруктуры(Структура, КлючВСтруктуре, ЗначениеПоУмолчанию);
		
		Если Результат = ЗначениеПоУмолчанию Или ПустаяСтрока(ОстатокКлюча) Тогда
			Возврат Результат;
		Иначе
			Возврат СвойствоСтруктуры(Результат, ОстатокКлюча, ЗначениеПоУмолчанию);
		КонецЕсли;
		
	Иначе
		
		Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию);
		
	КонецЕсли;
	
КонецФункции

Функция РазбитьМассивНаПорции(ИсходныйМассив, КоличествоВПорции = 1000)
	
	Порции = Новый Массив();
	
	Если ИсходныйМассив.Количество() <= КоличествоВПорции Тогда
		Порции.Добавить(ИсходныйМассив);
	Иначе
		
		Порция = Новый Массив();
		ПредельныйИндексПорции = КоличествоВПорции;
		
		Для индекс = 0 По ИсходныйМассив.ВГраница() Цикл
			
			Если индекс = ПредельныйИндексПорции Тогда
				
				Порции.Добавить(Порция);
				Порция = Новый Массив();
				ПредельныйИндексПорции = ПредельныйИндексПорции + КоличествоВПорции;
				
			КонецЕсли;
			
			Порция.Добавить(ИсходныйМассив[индекс]);
			
		КонецЦикла;
		
		Если Порция.Количество() > 0 Тогда
			Порции.Добавить(Порция);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Порции;
	
КонецФункции

Функция ОбъектВТекстJSON(Структура, УдалитьПробелыИПереносыСтрок = Ложь)
	
	ТекстJSON = "";
	
	Если УдалитьПробелыИПереносыСтрок Тогда
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	Иначе
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	ТекстJSON = ЗаписьJSON.Закрыть();
	
	Возврат ТекстJSON;
	
КонецФункции

Функция ТекстJSONВОбъект(ТекстJSON, ПреобразовыватьВСоответствие = Ложь)
	
	РезультатРазбора = Неопределено;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	
	Попытка
		РезультатРазбора = ПрочитатьJSON(Чтение, ПреобразовыватьВСоответствие);
	Исключение
		РезультатРазбора = Неопределено;
	КонецПопытки;
	
	Возврат РезультатРазбора;
	
КонецФункции

Функция ЗащищенноеСоединение()
	
	Попытка
		Возврат ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Исключение
		Возврат Новый ЗащищенноеСоединениеOpenSSL();
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйГИСМТ

Функция ВидыПродукцииИСМП(ВключатьТабачнуюПродукцию = Истина, ВключатьМолочнуюПродукцию = Истина, ВключатьАлкоголь = Истина)
	
	Возврат ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(ВключатьТабачнуюПродукцию, ВключатьМолочнуюПродукцию, ВключатьАлкоголь);
	
КонецФункции

Функция РазобратьКодМаркировки(Штрихкод, НастройкиРазбора, ВидыПродукции)
	
	Результат = Новый Структура();
	Результат.Вставить("Данные", Новый Массив());
	Результат.Вставить("Ошибка", "");
	
	ПримечаниеКРезультатуРазбора = Новый Структура();
	РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(Штрихкод, ВидыПродукции, 
		ПримечаниеКРезультатуРазбора, НастройкиРазбора);
	
	Если РезультатРазбора <> Неопределено Тогда
		Результат.Данные.Добавить(РезультатРазбора);
	ИначеЕсли ПримечаниеКРезультатуРазбора.РезультатРазбора <> Неопределено Тогда
		Результат.Данные = ПримечаниеКРезультатуРазбора.РезультатРазбора;
	ИначеЕсли ПустаяСтрока(ПримечаниеКРезультатуРазбора.ТекстОшибки) Тогда
		Результат.Ошибка = ПримечаниеКРезультатуРазбора.ТекстОшибки;
	Иначе
		Результат.Ошибка = НСтр("ru = 'Не удалось получить результат разобора кода маркировки!'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область СлужебныйГИСМТ_HTTP

Функция ПолучитьКлючСессии()
	
	КлючСессии = Неопределено;
	
	Попытка
		
		ПараметрыЗапроса = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии();
		ПараметрыЗапроса.ПредставлениеСервиса = НСтр("ru = 'Simple: Интеграция ГИС МТ'");
		
		КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(ПараметрыЗапроса, Неопределено, Истина);
		
		Если КлючСессии = Неопределено Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			// Проверить сертификаты на сервере
			СертификатыДляПодписания = ОбщегоНазначенияИС.СертификатыДляПодписанияНаСервере();
			
			Если СертификатыДляПодписания = Неопределено Или СертификатыДляПодписания.Сертификаты.Количество() = 0 Тогда
				ВызватьИсключение НСтр("ru = 'Отсутствуют настройки сертификатов организаций
				|для автоматического запроса сведений ГИС МТ.'");
			КонецЕсли;
			
			// Проверить запрос авторизации
			РезультатЗапроса = ИнтерфейсАвторизацииИСМПВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапроса);
			Если РезультатЗапроса.ПараметрыАвторизации = Неопределено Тогда
				
				Если ПустаяСтрока(РезультатЗапроса.ТекстОшибки) Тогда
					ВызватьИсключение НСтр("ru = 'Не удалось запросить авторизацию ГИС МТ.'");
				Иначе
					ВызватьИсключение РезультатЗапроса.ТекстОшибки;
				КонецЕсли;
				
			КонецЕсли;
			
			// Выбрать сертификат из установленных
			Если ПараметрыЗапроса.Организация = Неопределено Тогда
				СтрокаСертификата = СертификатыДляПодписания.Сертификаты[0];
			Иначе
				
				СтрокаСертификата = СертификатыДляПодписания.Сертификаты.Найти(ПараметрыЗапроса.Организация, "Организация");
				
				Если СтрокаСертификата = Неопределено Тогда
					
					ТекстОшибки = НСтр("ru = 'Для организации ""%1"" не найден установленный сертификат
					|для автоматического запроса сведений ГИС МТ.'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, ПараметрыЗапроса.Организация);
					ВызватьИсключение ТекстОшибки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Для авторизации требуется прикрепленная подпись
			ПараметрыCMS = ЭлектроннаяПодпись.ПараметрыCMS();
			ПараметрыCMS.Открепленная = Ложь;
			
			Если СертификатыДляПодписания.МенеджерКриптографии <> Неопределено Тогда
				СертификатыДляПодписания.МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
			КонецЕсли;
			
			РезультатПодписания = ИнтерфейсАвторизацииИСМПСлужебный.Подписать(
				РезультатЗапроса.ПараметрыАвторизации.Данные,
				ПараметрыCMS,
				СтрокаСертификата.СертификатКриптографии,
				СертификатыДляПодписания.МенеджерКриптографии);
			
			Если Не РезультатПодписания.Успех Тогда
				ОбщегоНазначенияКлиентСервер.Проверить(ПустаяСтрока(РезультатПодписания.ТекстОшибки), 
					РезультатПодписания.ТекстОшибки);
			КонецЕсли;
			
			РезультатЗапросаКлючаСессии = ИнтерфейсАвторизацииИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
				ПараметрыЗапроса,
				РезультатЗапроса.ПараметрыАвторизации,
				РезультатПодписания.Подпись);
			
			Если РезультатЗапросаКлючаСессии.КлючСессииУстановлен Тогда
				КлючСессии = ИнтерфейсАвторизацииИСМПВызовСервера.ТекущийКлючСессии(ПараметрыЗапроса);
			Иначе
				ОбщегоНазначенияКлиентСервер.Проверить(ПустаяСтрока(РезультатЗапросаКлючаСессии.ТекстОшибки), 
					РезультатЗапросаКлючаСессии.ТекстОшибки);
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если КлючСессии = Неопределено Тогда
				
				ТекстОшибки = НСтр("ru = 'Не удается получить ключ сессии ГИС МТ.
				|Обратитесь в техническую поддержку для выявления причины проблем получения ключа сессии!'");
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ВызватьИсключение(НСтр("ru = 'Не удалось получить ключ сессии ГИС МТ.'"), , , , ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат КлючСессии;
	
КонецФункции

Функция ОтправитьДанныеВСервис(АдресЗапроса, ТелоЗапроса, КлючСессии, HTTPМетод, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено, HTTPОтветЭмуляция = Неопределено, Соединение = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    "");
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     "");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   "");
	
	ЭтоДвоичныеДанные = ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные");
	ЭтоФайл           = ТипЗнч(ТелоЗапроса) = Тип("Файл");
	
	Если ТелоЗапроса <> Неопределено И ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
		ТелоЗапросаJSON = ТелоЗапроса;
	ИначеЕсли ТелоЗапроса <> Неопределено И Не ЭтоДвоичныеДанные И Не ЭтоФайл Тогда
		ТелоЗапросаJSON = ОбъектВТекстJSON(ТелоЗапроса, Истина);
	КонецЕсли;
	
	Если ЗаголовокHTTP = Неопределено Тогда
		
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		
		Если КлючСессии <> Неопределено Тогда
			ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
		
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	
	Если ТелоЗапроса <> Неопределено Тогда
		
		Если ЭтоДвоичныеДанные Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
		ИначеЕсли ЭтоФайл Тогда
			HTTPЗапрос.УстановитьИмяФайлаТела(ТелоЗапроса.ПолноеИмя);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
		
	КонецЕсли;
	
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ЗащищенноеСоединение();
		
	Иначе
		
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
		
	КонецЕсли;
	
	Попытка
		
		Если Соединение = Неопределено Тогда
			
			Соединение = Новый HTTPСоединение(
				ПараметрыОтправкиHTTPЗапросов.Сервер,
				ПараметрыОтправкиHTTPЗапросов.Порт,,,
				ИнтернетПрокси,
				ПараметрыОтправкиHTTPЗапросов.Таймаут,
				ЗащищенноеСоединение);
				
		КонецЕсли;
		
		Если HTTPМетод = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			HTTPОтвет = Соединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
		КонецЕсли;
		
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ТекстОшибкиЖР = НСтр("ru = 'Ошибка при выполнении запроса POST %1 в ИС МП %2
		|%3'");
		ТекстОшибкиЖР = СтрШаблон(ТекстОшибкиЖР, АдресЗапроса, ПараметрыОтправкиHTTPЗапросов.Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(Ошибка));
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖР);
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(Ошибка);
		
	КонецПопытки;
	
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса, ВозможенПустойОтвет = Ложь)
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатОтправкиHTTPЗапроса = РезультатHTTPЗапроса();
	РезультатОтправкиHTTPЗапроса.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Если РезультатЗапроса.HTTPОтвет <> Неопределено Тогда
		РезультатОтправкиHTTPЗапроса.КодСостояния = РезультатЗапроса.HTTPОтвет.КодСостояния;
		РезультатОтправкиHTTPЗапроса.Заголовки    = РезультатЗапроса.HTTPОтвет.Заголовки;
		Если ТипЗнч(РезультатЗапроса.HTTPОтвет) = Тип("Структура") Тогда
			РезультатОтправкиHTTPЗапроса.ТекстОтвета = РезультатЗапроса.HTTPОтвет.Тело;
		Иначе
			РезультатОтправкиHTTPЗапроса.ТекстОтвета = РезультатЗапроса.HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
	КонецЕсли;
	
	КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		
		ВозвращаемоеЗначение = HTTPОтветПолучен(ТекстОтвета, КодСостояния, Ложь, РезультатЗапроса);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.'");
		ИначеЕсли Не ВозможенПустойОтвет Тогда
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.'"), КодСостояния);
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ВозвращаемоеЗначение = HTTPОтветПолучен(ТекстОтвета, КодСостояния, Ложь, РезультатЗапроса);
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		ВозвращаемоеЗначение = HTTPОтветНеПолучен(
			ТекстОшибки,
			ТекстСообщенияXMLОтправлен,
			КодСостояния,
			Ложь, РезультатЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РезультатHTTPЗапроса()
	
	РезультатHTTPЗапроса = Новый Структура;
	РезультатHTTPЗапроса.Вставить("КодСостояния");
	РезультатHTTPЗапроса.Вставить("Заголовки");
	РезультатHTTPЗапроса.Вставить("ТекстОтвета");
	РезультатHTTPЗапроса.Вставить("ТекстОшибки");
	
	Возврат РезультатHTTPЗапроса;
	
КонецФункции

Функция HTTPОтветПолучен(ТекстВходящегоСообщенияJSON, КодСостояния = 200, КакФайл = Ложь, ДополнительныеПараметры = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",         Истина);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",            Истина);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния", КодСостояния);
	ВозвращаемоеЗначение.Вставить("Объект",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",  "");
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла", ТекстВходящегоСообщенияJSON);
	Иначе
		Попытка
			ВозвращаемоеЗначение.Объект = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON, Ложь);
		Исключение
			ВозвращаемоеЗначение.Объект = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON, Истина);
		КонецПопытки;
		
		ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщения", ТекстВходящегоСообщенияJSON);
		Если ВозвращаемоеЗначение.Объект <> Неопределено Тогда
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ОбъектВТекстJSON(ВозвращаемоеЗначение.Объект));
		Иначе
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ТекстВходящегоСообщенияJSON);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция HTTPОтветНеПолучен(Ошибка, ЗапросОтправлен, КодСостояния = Неопределено, КакФайл = Ложь, ДополнительныеПараметры = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",         ЗапросОтправлен);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",            Ложь);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния", КодСостояния);
	ВозвращаемоеЗначение.Вставить("Объект",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",  Строка(Ошибка));
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла", "");
	Иначе
		ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщения",     "");
		ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", "");
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса)
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда

		ТекстОшибки = СтрШаблон(
			НСтр("ru='При выполнении запроса %1 возникла ошибка.
				     |Код состояния HTTP: %2.
				     |Текст ошибки: %3.'"),
			URLЗапроса,
			РезультатОтправкиЗапроса.КодСостояния,
			ПредставлениеОшибкиИзJSON(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON));
			
	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru='При отправке запроса %1 возникла ошибка.
				     |Текст ошибки: %2.'"),
			URLЗапроса,
			РезультатОтправкиЗапроса.ТекстОшибки);

	КонецЕсли;
	
	Возврат ТекстОшибки;

КонецФункции

Функция ПредставлениеОшибкиИзJSON(ТекстВходящегоСообщенияJSON)
	
	ДанныеJSON = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON);
	
	Если ДанныеJSON <> Неопределено
		И ТипЗнч(ДанныеJSON) = Тип("Структура")
		И ДанныеJSON.Свойство("globalErrors")
		И ТипЗнч(ДанныеJSON.globalErrors) = Тип("Массив") Тогда
		
		ТекстыОшибок = Новый Массив;
		Для Каждого СтрокаОшибки Из ДанныеJSON.globalErrors Цикл
			
			Если Не (ТипЗнч(СтрокаОшибки) = Тип("Строка") Или ТипЗнч(СтрокаОшибки) = Тип("Структура")) Тогда
				Возврат ТекстВходящегоСообщенияJSON;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаОшибки) = Тип("Строка") И ЗначениеЗаполнено(СтрокаОшибки) Тогда
				ТекстыОшибок.Добавить(ТекстПредставленияОшибки(СтрокаОшибки));
			ИначеЕсли ТипЗнч(СтрокаОшибки) = Тип("Структура") Тогда
				
				ТекстОшибки = Неопределено;
				КодОшибки   = Неопределено;
				СтрокаОшибки.Свойство("error",     ТекстОшибки);
				СтрокаОшибки.Свойство("errorCode", КодОшибки);
				ПредставлениеОшибки = СокрЛП(СтрШаблон("%1: %2", КодОшибки, ТекстОшибки));
				Если ЗначениеЗаполнено(КодОшибки) Или ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстыОшибок.Добавить(ПредставлениеОшибки);
				Иначе
					Возврат ТекстВходящегоСообщенияJSON;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеJSON.Свойство("fieldErrors") И ТипЗнч(ДанныеJSON.fieldErrors) = Тип("Массив") Тогда
			
			Для Каждого СтрокаОшибкиПоля Из ДанныеJSON.fieldErrors Цикл
				
				ИмяПоля     = Неопределено;
				ТекстОшибки = Неопределено;
				СтрокаОшибкиПоля.Свойство("fieldName",  ИмяПоля);
				СтрокаОшибкиПоля.Свойство("fieldError", ТекстОшибки);
				
				ПредставлениеОшибки = СокрЛП(СтрШаблон("%1: %2", ИмяПоля, ТекстОшибки));
				Если ЗначениеЗаполнено(ИмяПоля) Или ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстыОшибок.Добавить(ПредставлениеОшибки);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат СтрСоединить(ТекстыОшибок, Символы.ПС);
		
	ИначеЕсли ДанныеJSON <> Неопределено
		И ТипЗнч(ДанныеJSON) = Тип("Массив") Тогда
		
		ТекстыОшибок = Новый Массив;
		Для Каждого СтрокаОшибки Из ДанныеJSON Цикл
			
			Если Не ТипЗнч(СтрокаОшибки) = Тип("Структура")
				Или Не СтрокаОшибки.Свойство("cisInfo")
				Или Не СтрокаОшибки.Свойство("errorMessage") Тогда
				Возврат ТекстВходящегоСообщенияJSON;
			КонецЕсли;
			
			ТекстыОшибок.Добавить(ТекстПредставленияОшибки(СтрокаОшибки.errorMessage));
			
		КонецЦикла;
		
		Возврат СтрСоединить(ТекстыОшибок, Символы.ПС);
		
	Иначе
		Возврат ТекстВходящегоСообщенияJSON;
	КонецЕсли;
	
КонецФункции

Функция ТекстПредставленияОшибки(ИсходноеСообщение)
	
	ЗначениеПоиска = СокрЛП(НРег(ИсходноеСообщение));
	
	ТекстыОшибок = Новый Соответствие();
	
	ТекстыОшибок.Вставить(
		НРег("Not enough balance"),
		НСтр("ru = 'Недостаточно средств на балансе для получения кодов маркировки из СУЗ'"));
	
	ВозвращаемоеЗначение = ТекстыОшибок.Получить(ЗначениеПоиска);
	
	Если ВозвращаемоеЗначение = Неопределено Тогда
		ВозвращаемоеЗначение = ИсходноеСообщение;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КомандыСлужебный

Процедура ПроверитьПараметрыКомандыПриНачалеВыполнения(Параметры, ПроцедураВызова)
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ПроцедураВызова, "Параметры", Параметры, Тип("Структура"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(Параметры.Свойство("РезультатВыполнения"),
		НСтр("ru = 'Отсутствует ключ ""РезультатВыполнения"" в переданных параметрах'"), ПроцедураВызова);
	
КонецПроцедуры

#Область ТестИнициализации

Процедура ВыполнитьТестИнициализации(Параметры)
	
	ПроверитьПараметрыКомандыПриНачалеВыполнения(Параметры, "ВыполнитьТестИнициализации");
	
	Параметры.РезультатВыполнения.Вставить("КлючПроверки", "SimpleИнтеграцияГИСМТ");
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросСоставаКодовМаркировки

Процедура ПроверкаИспользованияКомандыЗапросСоставаКодовМаркировки(Параметры)
	
	ПроверитьПараметрыКомандыПриНачалеВыполнения(Параметры, "ПроверкаИспользованияКомандыЗапросСоставаКодовМаркировки");
	
	Ошибки = Новый Массив();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.БазоваяФункциональность") Тогда
		
		Попытка
			ОбщегоНазначения.ОбщийМодуль("РазборКодаМаркировкиИССлужебный");
		Исключение
			ТекстОшибки = НСтр("ru = 'Отсутствует общий модуль ""РазборКодаМаркировкиИССлужебный"".'");
			Ошибки.Добавить(ТекстОшибки);
		КонецПопытки;
		
		Попытка
			ОбщегоНазначения.ОбщийМодуль("РазборКодаМаркировкиИССлужебныйКлиентСервер");
		Исключение
			ТекстОшибки = НСтр("ru = 'Отсутствует общий модуль ""РазборКодаМаркировкиИССлужебныйКлиентСервер"".'");
			Ошибки.Добавить(ТекстОшибки);
		КонецПопытки;
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Отсутствует подсистема ""ГосИС.БазоваяФункциональность"".'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП.Расширенная") Тогда
		
		Попытка
			ОбщегоНазначения.ОбщийМодуль("ИнтерфейсАвторизацииИСМПСлужебный");
		Исключение
			ТекстОшибки = НСтр("ru = 'Отсутствует общий модуль ""ИнтерфейсАвторизацииИСМПСлужебный"".'");
			Ошибки.Добавить(ТекстОшибки);
		КонецПопытки;
		
		Попытка
			ОбщегоНазначения.ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
		Исключение
			ТекстОшибки = НСтр("ru = 'Отсутствует общий модуль ""ИнтерфейсАвторизацииИСМПВызовСервера"".'");
			Ошибки.Добавить(ТекстОшибки);
		КонецПопытки;
		
		Попытка
			ОбщегоНазначения.ОбщийМодуль("ИнтерфейсИСМПОбщегоНазначенияКлиентСервер");
		Исключение
			ТекстОшибки = НСтр("ru = 'Отсутствует общий модуль ""ИнтерфейсИСМПОбщегоНазначенияКлиентСервер"".'");
			Ошибки.Добавить(ТекстОшибки);
		КонецПопытки;
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Отсутствует подсистема ""ГосИС.ИСМП.Расширенная"".'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.БазоваяФункциональность.Расширенная") Тогда
		
		Попытка
			ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияИС");
		Исключение
			ТекстОшибки = НСтр("ru = 'Отсутствует общий модуль ""ОбщегоНазначенияИС"".'");
			Ошибки.Добавить(ТекстОшибки);
		КонецПопытки;
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Отсутствует подсистема ""ГосИС.БазоваяФункциональность.Расширенная"".'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		
		Попытка
			ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Исключение
			ТекстОшибки = НСтр("ru = 'Отсутствует общий модуль ""ПолучениеФайловИзИнтернета"".'");
			Ошибки.Добавить(ТекстОшибки);
		КонецПопытки;
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Отсутствует подсистема ""СтандартныеПодсистемы.ПолучениеФайловИзИнтернета"".'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Параметры.РезультатВыполнения.Вставить("Ошибки", Ошибки);
	
КонецПроцедуры

Процедура ВыполнитьКомандуЗапросаСоставаКМ(Параметры)
	
	ПроверитьПараметрыКомандыПриНачалеВыполнения(Параметры, "ВыполнитьЗапросСоставаКодовМаркировки");
	
	СоставКодовМаркировки = Новый Массив();
	
	РезультатОбработки = ЗапросСоставаКМОбработатьШтрихкоды(Параметры.Штрихкоды);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СоставКодовМаркировки, РезультатОбработки.ШтрихкодыСОшибками);
	
	Если РезультатОбработки.ШтрихкодыКОтправке.Количество() > 0 Тогда
		
		КлючСессии = ПолучитьКлючСессии();
		
		ШтрихкодыРезультат = Новый Соответствие();
		ЗапросСоставаКМЗапроситьИзСервиса(КлючСессии, РезультатОбработки.ШтрихкодыКОтправке, ШтрихкодыРезультат, Истина);
		
		Для Каждого СоответствиеШтрихкодовКЗ Из РезультатОбработки.СоответствияШтрихкодов Цикл
			
			РезультатШК = Неопределено;
			РезультатШКОшибка = Неопределено;
			
			Для индекс = 0 По СоответствиеШтрихкодовКЗ.Значение.ВГраница() Цикл
				
				РезультатИзЗапроса = ШтрихкодыРезультат.Получить(СоответствиеШтрихкодовКЗ.Значение[индекс]);
				
				Если РезультатИзЗапроса = Неопределено Тогда
					Продолжить;
				ИначеЕсли РезультатИзЗапроса.Свойство("error") Тогда
					РезультатШКОшибка = РезультатИзЗапроса;
				Иначе
					РезультатШК = РезультатИзЗапроса;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если РезультатШК = Неопределено И РезультатШКОшибка = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось получить результат запроса по штрихкоду ""%1"".
				|Обратитесь в техническую поддержку!'");
				РезультатШКОшибка = ЗапросСоставаКМСтруктураШтрихкодСОшибкой(СоответствиеШтрихкодовКЗ.Ключ, ТекстОшибки);
			КонецЕсли;
			
			Если РезультатШК <> Неопределено Тогда
				СоставКодовМаркировки.Добавить(РезультатШК);
			Иначе
				СоставКодовМаркировки.Добавить(РезультатШКОшибка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры.РезультатВыполнения.Вставить("СоставКодовМаркировки", СоставКодовМаркировки);
	
КонецПроцедуры

Функция ЗапросСоставаКМСтруктураШтрихкодСОшибкой(ШтрихкодЗапроса, Ошибка)
	
	СтруктураШтрихкодаСОшибкой = Новый Структура();
	СтруктураШтрихкодаСОшибкой.Вставить("requestedCis", ШтрихкодЗапроса);
	СтруктураШтрихкодаСОшибкой.Вставить("error", Ошибка);
	
	Возврат СтруктураШтрихкодаСОшибкой;
	
КонецФункции

Функция ЗапросСоставаКМСтруктураШтрихкод(ШтрихкодЗапроса, ШтрихкодОтвета)
	
	СтруктураШтрихкодаСОшибкой = Новый Структура();
	СтруктураШтрихкодаСОшибкой.Вставить("requestedCis", ШтрихкодЗапроса);
	СтруктураШтрихкодаСОшибкой.Вставить("cis", ШтрихкодОтвета);
	СтруктураШтрихкодаСОшибкой.Вставить("child", Новый Массив());
	
	Возврат СтруктураШтрихкодаСОшибкой;
	
КонецФункции

Функция ЗапросСоставаКМОбработатьШтрихкоды(Штрихкоды)
	
	СоответствияШтрихкодов = Новый Соответствие();
	
	Результат = Новый Структура();
	Результат.Вставить("СоответствияШтрихкодов", СоответствияШтрихкодов);
	Результат.Вставить("ШтрихкодыКОтправке", Новый Массив());
	Результат.Вставить("ШтрихкодыСОшибками", Новый Массив());
	
	Если Штрихкоды.Количество() > 0 Тогда
		
		НастройкиРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь);
		
		ПараметрыНормализацииМОТП = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииМОТП.ВключатьМРЦ = Ложь;
		ПараметрыНормализацииМОТП.НачинаетсяСоСкобки = Ложь;
		
		ПараметрыНормализацииИСМПУкороченныйФормат = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииИСМПУкороченныйФормат.НачинаетсяСоСкобки = Ложь;
		
		ПараметрыНормализацииИСМПЛидирующиеНули = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииИСМПЛидирующиеНули.НачинаетсяСоСкобки = Ложь;
		ПараметрыНормализацииИСМПЛидирующиеНули.ВключатьЛидирующиеНули = Истина;
		
		Для индекс = 0 По Штрихкоды.ВГраница() Цикл
			
			ИсходныйШтрихкод = Штрихкоды[индекс];
			
			Если СоответствияШтрихкодов.Получить(ИсходныйШтрихкод) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатРазбора = РазобратьКодМаркировки(ИсходныйШтрихкод, НастройкиРазбораКодаМаркировки, 
				НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции);
			
			Если Не ПустаяСтрока(РезультатРазбора.Ошибка) Тогда
				ДанныеШКСОшибкой = ЗапросСоставаКМСтруктураШтрихкодСОшибкой(ИсходныйШтрихкод, РезультатРазбора.Ошибка);
				Результат.ШтрихкодыСОшибками.Добавить(ДанныеШКСОшибкой);
				Продолжить;
			КонецЕсли;
			
			ШтрихкодыСоответствия = Новый Массив();
			
			Для Каждого ДанныеРезультатаРазбора Из РезультатРазбора.Данные Цикл
				
				Для Каждого ВидПродукции Из ДанныеРезультатаРазбора.ВидыПродукции Цикл
					
					НормализованныеШК = Новый Массив();
					
					Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
						
						НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
							ДанныеРезультатаРазбора, ВидПродукции, ПараметрыНормализацииМОТП);
						НормализованныеШК.Добавить(НормализованныйКодМаркировки);
						
					Иначе
						
						НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
							ДанныеРезультатаРазбора, ВидПродукции, ПараметрыНормализацииИСМПУкороченныйФормат);
						НормализованныеШК.Добавить(НормализованныйКодМаркировки);
						
						НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
							ДанныеРезультатаРазбора, ВидПродукции, ПараметрыНормализацииИСМПЛидирующиеНули);
						НормализованныеШК.Добавить(НормализованныйКодМаркировки);
						
					КонецЕсли;
					
					Для Каждого НормализованныйШК Из НормализованныеШК Цикл
						
						Если Результат.ШтрихкодыКОтправке.Найти(НормализованныйШК) = Неопределено Тогда
							Результат.ШтрихкодыКОтправке.Добавить(НормализованныйШК);
						КонецЕсли;
						
						Если ШтрихкодыСоответствия.Найти(НормализованныйШК) = Неопределено Тогда
							ШтрихкодыСоответствия.Добавить(НормализованныйШК);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			СоответствияШтрихкодов.Вставить(ИсходныйШтрихкод, ШтрихкодыСоответствия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗапросСоставаКМЗапроситьИзСервиса(КлючСессии, ШтрихкодыКЗапросу, ШтрихкодыРезультат, РезультатСоответствие = Ложь)
	
	URLЗапроса = "api/v3/true-api/cises/info";
	
	ПорцииШтрихкодов = РазбитьМассивНаПорции(ШтрихкодыКЗапросу, 1000);
	
	Для индекс = 0 По ПорцииШтрихкодов.ВГраница() Цикл
		
		ПараметрыОтправки = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина);
		
		РезультатЗапроса = ОтправитьДанныеВСервис(URLЗапроса, ПорцииШтрихкодов[индекс], 
			КлючСессии, "POST", ПараметрыОтправки);
		
		РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
		
		Если Не РезультатОтправкиЗапроса.ОтветПолучен Тогда
			ВызватьИсключение ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
		Если (РезультатОтправкиЗапроса.КодСостояния <> 200 И РезультатОтправкиЗапроса.КодСостояния <> 404) Или
			ТипЗнч(РезультатОтправкиЗапроса.Объект) <> Тип("Массив") Тогда
			ВызватьИсключение ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
		Для индекс = 0 По РезультатОтправкиЗапроса.Объект.ВГраница() Цикл
			
			Если Не РезультатОтправкиЗапроса.Объект[индекс].Свойство("cisInfo") Тогда
				ВызватьИсключение ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			КонецЕсли;
			
			Ошибка = СвойствоСтруктуры(РезультатОтправкиЗапроса.Объект[индекс], "errorMessage", "");
			
			Если ПустаяСтрока(Ошибка) Тогда
				
				КИЗЗапроса = СвойствоСтруктуры(РезультатОтправкиЗапроса.Объект[индекс], 
					"cisInfo.requestedCis", "");
				КИЗ = СвойствоСтруктуры(РезультатОтправкиЗапроса.Объект[индекс], "cisInfo.cis", "");
				
				Если ПустаяСтрока(КИЗЗапроса) И ПустаяСтрока(КИЗ) Тогда
					ТекстОшибки = НСтр("ru = 'Не соответствие API ГИС МТ.
					|Обратитесь в техническую поддержку!
					|
					|%1'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставлениеОшибкиИзJSON(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON));
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ДанныеКМ = ЗапросСоставаКМСтруктураШтрихкод(КИЗЗапроса, КИЗ);
				
				ВложенныеШК = СвойствоСтруктуры(РезультатОтправкиЗапроса.Объект[индекс], "cisInfo.child", Новый Массив());
				
				Если ВложенныеШК.Количество() > 0 Тогда
					ЗапросСоставаКМЗапроситьИзСервиса(КлючСессии, ВложенныеШК, ДанныеКМ.child);
				КонецЕсли;
				
			Иначе
				
				КИЗ = СвойствоСтруктуры(РезультатОтправкиЗапроса.Объект[индекс], "cisInfo.cis", "");
				
				Если ПустаяСтрока(КИЗ) Тогда
					ТекстОшибки = НСтр("ru = 'Не соответствие API ГИС МТ.
					|Обратитесь в техническую поддержку!
					|
					|%1'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставлениеОшибкиИзJSON(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON));
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ДанныеКМ = ЗапросСоставаКМСтруктураШтрихкодСОшибкой(КИЗ, Ошибка);
				
			КонецЕсли;
			
			Если РезультатСоответствие Тогда
				ШтрихкодыРезультат.Вставить(ДанныеКМ.requestedCis, ДанныеКМ);
			Иначе
				ШтрихкодыРезультат.Добавить(ДанныеКМ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросСоставаКМПоУпаковкам

Функция ПолучитьПараметрыСканированияЗапросаСоставаКМПоУпаковкам()
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.БазовыеПараметрыСканирования();
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения", ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПустаяСсылка"));
	ПараметрыСканирования.ПодсистемаИСМПСуществует = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП");
	
	ПараметрыСканирования.Вставить("ДокументЕГАИС",                                 Неопределено);
	ПараметрыСканирования.Вставить("КонтрольАкцизныхМарок",                         Ложь);
	ПараметрыСканирования.Вставить("ОрганизацияЕГАИС",                              Неопределено);
	ПараметрыСканирования.Вставить("АлкогольнаяПродукция",                          Неопределено);
	ПараметрыСканирования.Вставить("КонтрольПустогоСтатуса150СимвольныхМарок",      Истина);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева", Ложь);
	ПараметрыСканирования.Вставить("СоответствиеШтрихкодовСтрокДерева",             Неопределено);
	ПараметрыСканирования.Вставить("КонтрольЗаполненияМарокСНомеромИСерией",        Истина);
	ПараметрыСканирования.Вставить("ДоступныеСтатусы",                              Новый Массив);
	ПараметрыСканирования.Вставить("Номенклатура",                                  Неопределено);
	ПараметрыСканирования.Вставить("Характеристика",                                Неопределено);
	ПараметрыСканирования.Вставить("Серия",                                         Неопределено);
	ПараметрыСканирования.Вставить("КлючевыеРеквизиты",                             Новый Массив);
	ПараметрыСканирования.Вставить("Операция",                                      Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьНоменклатуру",                       Ложь);
	ПараметрыСканирования.Вставить("ТолькоЕГАИС",                                   Ложь);
	
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок = Истина;
	ПараметрыСканирования.Владелец                                           = Неопределено;
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок                 = Неопределено;
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                                = Истина;
	ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой        = Истина;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции     = Истина;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки                          = Ложь;
	ПараметрыСканирования.СопоставлятьНоменклатуру                           = Истина;
	ПараметрыСканирования.Организация                                        = Неопределено;
	//ПараметрыСканирования.ЗаполнятьСрокГодности                              = Истина;
	
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП", Истина);
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП", Истина);
	ПараметрыСканирования.Вставить("ТребуетсяЧастичноеВыбытие", Истина);
	ПараметрыСканирования.Вставить("СозданиеНаборов", Истина);
	
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования, Истина);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Истина);

	ПараметрыСканирования.Вставить("КонтрольРасхожденийСДокументомОснованием", Ложь);
	
	ПараметрыСканирования.ТолькоМаркируемаяПродукция          = Истина;
	ПараметрыСканирования.ОпределениеВидаПродукцииИСМП        = Истина;
	ПараметрыСканирования.КонтрольУникальностиКодовМаркировки = Ложь;
	ПараметрыСканирования.ДопустимыеВидыПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	
	ПараметрыСканирования.Вставить("ЭтоОтчетПроизводственнойЛинии", Ложь);
	ПараметрыСканирования.Вставить("ВариантПолученияМРЦ", "ВычислениеИЗапрос");
	ПараметрыСканирования.Вставить("ВидОперацииИСМП", ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПустаяСсылка"));
	ПараметрыСканирования.Вставить("ТребуетсяПроверкаСредствамиККТ", Ложь);
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП", Истина);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП", Истина);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

Процедура ВыполнитьКомандуПолучитьВложенныеШтрихкодыУпаковок(Параметры)
	
	ПроверитьПараметрыКомандыПриНачалеВыполнения(Параметры, "ВыполнитьКомандуПолучитьВложенныеШтрихкодыУпаковок");
	
	ВложенныеШтрихкодыСостав = Новый Массив();
	
	Если Параметры.Свойство("ПараметрыСканирования") Тогда
		ПараметрыСканирования = Параметры.ПараметрыСканирования;
	Иначе
		
		ПараметрыСканирования = ПолучитьПараметрыСканированияЗапросаСоставаКМПоУпаковкам();
		
		Если Параметры.Свойство("ДополнительныеПараметрыСканирования") Тогда
			
			Для Каждого КлючЗначение Из Параметры.ДополнительныеПараметрыСканирования Цикл
				ПараметрыСканирования.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам();
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(Параметры.Упаковки, ПараметрыСканирования);
	ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
	
	ПараметрыДополненияТаблицыДанныеКодовМаркировки = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
    ДанныеПоШтрихкодам, ВложенныеШтрихкоды.ДеревоУпаковок);
	ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,,
			ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);
			
	КонецЕсли;
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		Или ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМП.УстановитьПризнакОтказаОтПроверкиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если Параметры.Свойство("СоздаватьШтрихкодыУпаковок") И Параметры.СоздаватьШтрихкодыУпаковок Тогда
		
		Если Параметры.Свойство("СоздаватьШтрихкодыУпаковокСтандартнымСпособом") И Параметры.СоздаватьШтрихкодыУпаковокСтандартнымСпособом Тогда
			Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
		Иначе
			
			ПараметрыСозданияШтрихкодов = Новый Структура();
			ПараметрыСозданияШтрихкодов.Вставить("ШтрихкодыУпаковок", СуществующиеЭлементыШтрихкодовДерева(ВложенныеШтрихкоды.ДеревоУпаковок));
			ПараметрыСозданияШтрихкодов.Вставить("КэшСтатусовУказанияСерий", Новый Соответствие());
			ПараметрыСозданияШтрихкодов.Вставить("КэшСтрокДерева", Новый Соответствие());
			
			СоздатьШтрихкодыУпаковокПоСтрокамДерева(ВложенныеШтрихкоды.ДеревоУпаковок.Строки, ПараметрыСозданияШтрихкодов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьМассивВложенныхШтрихкодовПоСтрокамДерева(ВложенныеШтрихкодыСостав, ВложенныеШтрихкоды.ДеревоУпаковок.Строки);
	
	Параметры.РезультатВыполнения.Вставить("ВложенныеШтрихкоды", ВложенныеШтрихкодыСостав);
	Параметры.РезультатВыполнения.Вставить("ДеревоУпаковок", ВложенныеШтрихкоды.ДеревоУпаковок);
	
КонецПроцедуры

Функция СуществующиеЭлементыШтрихкодовДерева(ДеревоУпаковок)

	КвалификаторыСтроки = Новый КвалификаторыСтроки(200);
	ОписаниеСтроки      = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);

	ЗначенияШтрихкодов = Новый ТаблицаЗначений;
	ЗначенияШтрихкодов.Колонки.Добавить("Штрихкод", ОписаниеСтроки);
	ВсеЗначенияШтрихкодовСтрокДерева(ДеревоУпаковок.Строки, ЗначенияШтрихкодов);

	ТаблицаЭлементов = ШтрихкодированиеИС.ШтрихкодыУпаковок(ЗначенияШтрихкодов.ВыгрузитьКолонку("Штрихкод"));

	Возврат ТаблицаЭлементов;

КонецФункции

Процедура ВсеЗначенияШтрихкодовСтрокДерева(СтрокиДерева, ЗначенияШтрихкодов)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл

		НоваяСтрока = ЗначенияШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод = СтрокаДерева.Штрихкод;
		ВсеЗначенияШтрихкодовСтрокДерева(СтрокаДерева.Строки, ЗначенияШтрихкодов);

	КонецЦикла;

КонецПроцедуры

Процедура СоздатьШтрихкодыУпаковокПоСтрокамДерева(СтрокиДерева, ПараметрыСозданияШтрихкодов)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		КэшСтроки = ПараметрыСозданияШтрихкодов.КэшСтрокДерева.Получить(СтрокаДерева);
		Если КэшСтроки = Неопределено Тогда

			КэшСтроки = Новый Структура;
			КэшСтроки.Вставить("ВложенныеУпаковки", Новый Массив);
			КэшСтроки.Вставить("ВложенныеХешСуммы", Новый СписокЗначений);
			ПараметрыСозданияШтрихкодов.КэшСтрокДерева.Вставить(СтрокаДерева, КэшСтроки);

		КонецЕсли;

		КэшСтрокиРодителя = ПараметрыСозданияШтрихкодов.КэшСтрокДерева.Получить(СтрокаДерева.Родитель);

		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

			НайденнаяСтрока = ПараметрыСозданияШтрихкодов.ШтрихкодыУпаковок.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			Если НайденнаяСтрока = Неопределено Тогда
				
				СтруктураСоздания = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
				ЗаполнитьЗначенияСвойств(СтруктураСоздания, СтрокаДерева, , "КоличествоПотребительскихУпаковок");
				
				СтрокаДерева.ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(СтруктураСоздания, , , ПараметрыСозданияШтрихкодов.КэшСтатусовУказанияСерий);

			ИначеЕсли СтрокаДерева.Серия <> НайденнаяСтрока.Серия Тогда
				
				ЗначенияРеквизитов = Новый Структура("Серия", СтрокаДерева.Серия);
				Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(НайденнаяСтрока.Ссылка, ЗначенияРеквизитов);
				СтрокаДерева.ШтрихкодУпаковки = НайденнаяСтрока.Ссылка;

			Иначе

				СтрокаДерева.ШтрихкодУпаковки = НайденнаяСтрока.Ссылка;

			КонецЕсли;

			Если КэшСтрокиРодителя <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.ХешСуммаНормализации) Тогда
					КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.ХешСуммаНормализации);
				Иначе
					КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.Штрихкод);
				КонецЕсли;
				КэшСтрокиРодителя.ВложенныеУпаковки.Добавить(СтрокаДерева.ШтрихкодУпаковки);
			КонецЕсли;

		Иначе
			
			СоздатьШтрихкодыУпаковокПоСтрокамДерева(СтрокаДерева.Строки, ПараметрыСозданияШтрихкодов);
			
			НайденнаяСтрока = ПараметрыСозданияШтрихкодов.ШтрихкодыУпаковок.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			
			Если НайденнаяСтрока = Неопределено Тогда
				
				СтруктураСоздания = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
				ЗаполнитьЗначенияСвойств(СтруктураСоздания, СтрокаДерева, , "КоличествоПотребительскихУпаковок");
				ЗначенияРеквизитов.Вставить("Количество", КэшСтроки.ВложенныеУпаковки.Количество());
				
				СтрокаДерева.ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(СтруктураСоздания, КэшСтроки.ВложенныеУпаковки, , ПараметрыСозданияШтрихкодов.КэшСтатусовУказанияСерий);

			Иначе
				
				ХешСуммаСодержимогоУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(КэшСтроки.ВложенныеХешСуммы);
				
				ЗначенияРеквизитов = Новый Структура();
				ЗначенияРеквизитов.Вставить("ХешСумма", ХешСуммаСодержимогоУпаковки);
				ЗначенияРеквизитов.Вставить("Количество", КэшСтроки.ВложенныеУпаковки.Количество());
				
				Если СтрокаДерева.Серия <> НайденнаяСтрока.Серия Тогда
					ЗначенияРеквизитов.Вставить("Серия", СтрокаДерева.Серия);
				КонецЕсли;
				
				Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(НайденнаяСтрока.Ссылка, ЗначенияРеквизитов, КэшСтроки.ВложенныеУпаковки);
				СтрокаДерева.ШтрихкодУпаковки = НайденнаяСтрока.Ссылка;
				СтрокаДерева.ХешСумма = ХешСуммаСодержимогоУпаковки;
				
			КонецЕсли;
			
			КэшСтрокиРодителя = ПараметрыСозданияШтрихкодов.КэшСтрокДерева.Получить(СтрокаДерева.Родитель);
			Если КэшСтрокиРодителя <> Неопределено Тогда
				КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.ХешСумма);
				КэшСтрокиРодителя.ВложенныеУпаковки.Добавить(СтрокаДерева.ШтрихкодУпаковки);
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивВложенныхШтрихкодовПоСтрокамДерева(МассивВложенныхШтрихкодов, СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("EAN", СтрокаДерева.EAN);
		ДанныеСтроки.Вставить("GTIN", СтрокаДерева.GTIN);
		ДанныеСтроки.Вставить("ВидПродукции", СтрокаДерева.ВидПродукции);
		ДанныеСтроки.Вставить("ВидУпаковки", СтрокаДерева.ВидУпаковки);
		ДанныеСтроки.Вставить("ТипУпаковки", СтрокаДерева.НормализованныйШтрихкод);
		ДанныеСтроки.Вставить("ТипШтрихкода", СтрокаДерева.ТипШтрихкода);
		ДанныеСтроки.Вставить("ПредставлениеНоменклатуры", СтрокаДерева.ПредставлениеНоменклатуры);
		ДанныеСтроки.Вставить("Номенклатура", СтрокаДерева.Номенклатура);
		ДанныеСтроки.Вставить("Характеристика", СтрокаДерева.Характеристика);
		ДанныеСтроки.Вставить("Упаковка", СтрокаДерева.Упаковка);
		ДанныеСтроки.Вставить("Серия", СтрокаДерева.Серия);
		ДанныеСтроки.Вставить("ШтрихкодУпаковки", СтрокаДерева.ШтрихкодУпаковки);
		ДанныеСтроки.Вставить("НормализованныйШтрихкод", СтрокаДерева.НормализованныйШтрихкод);
		ДанныеСтроки.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
		ДанныеСтроки.Вставить("Статус", СтрокаДерева.Статус);
		ДанныеСтроки.Вставить("ИННВладельца", СтрокаДерева.EAN);
		ДанныеСтроки.Вставить("ИННПроизводителя", СтрокаДерева.EAN);
		ДанныеСтроки.Вставить("ВложенныеШтрихкоды", Новый Массив());
		
		ЗаполнитьМассивВложенныхШтрихкодовПоСтрокамДерева(ДанныеСтроки.ВложенныеШтрихкоды, СтрокаДерева.Строки);
		
		МассивВложенныхШтрихкодов.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
