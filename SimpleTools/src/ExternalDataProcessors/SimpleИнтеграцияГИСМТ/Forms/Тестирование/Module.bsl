
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаИнтеграционнаяОбработка = РеквизитФормыВЗначение("Объект");
	
	ПодключеннаяИнтеграционнаяОбработка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту(
		"ИмяОбъекта", ЭтаИнтеграционнаяОбработка.Метаданные().Имя);
	
	Если Не ПодключеннаяИнтеграционнаяОбработка.Пустая() Тогда
		ВыполнятьЧерезПодключеннуюОбработку = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнтеграционнаяОбработкаПриИзмененииНаКлиенте(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодключеннаяИнтеграционнаяОбработкаПриИзменении(Элемент)
	
	ИнтеграционнаяОбработкаПриИзмененииНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗапросСоставаКодовМаркировки(Команда)
	
	ОчиститьСообщения();
	РезультатЗапросаСоставаКодовМаркировки = "";
	
	Результат = ВыполнитьЗапросСоставаКодовМаркировкиНаСервере();
	
	Если Не ПустаяСтрока(Результат.Ошибка) Тогда
		ПоказатьПредупреждение(, Результат.Ошибка, , НСтр("ru = 'Ошибка'"));
	КонецЕсли;
	
	РезультатЗапросаСоставаКодовМаркировки = Результат.Данные;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗависимостейКомандыЗапросСоставаКМ(Команда)
	
	ОчиститьСообщения();
	
	Результат = ВыполнитьПроверкуЗависимостейКомандыЗапросСоставаКМНаСервере();
	
	Если ПустаяСтрока(Результат.Ошибка) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибок не обнаружено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПоказатьПредупреждение(, Результат.Ошибка, , НСтр("ru = 'Ошибка'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросВложенностиУпаковок(Команда)
	
	ОчиститьСообщения();
	РезультатЗапросаВложенностиУпаковок = "";
	
	Результат = ВыполнитьЗапросВложенностиУпаковокНаСервере();
	
	Если Не ПустаяСтрока(Результат.Ошибка) Тогда
		ПоказатьПредупреждение(, Результат.Ошибка, , НСтр("ru = 'Ошибка'"));
	КонецЕсли;
	
	РезультатЗапросаВложенностиУпаковок = Результат.Данные;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИнтеграционнаяОбработкаПриИзмененииНаКлиенте(ПервыйЗапуск = Ложь)
	
	ОшибкаПроверки = ПроверитьВыбраннуюИнтеграционнуюОбработку(ПодключеннаяИнтеграционнаяОбработка);
	
	Если Не ПустаяСтрока(ОшибкаПроверки) Тогда
		
		ПодключеннаяИнтеграционнаяОбработка = ПредопределенноеЗначение("Справочник.ДополнительныеОтчетыИОбработки.ПустаяСсылка");
		
		Если Не ПервыйЗапуск Тогда
			ПоказатьПредупреждение(, ОшибкаПроверки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодключеннаяИнтеграционнаяОбработка.Пустая() Тогда
		ВыполнятьЧерезПодключеннуюОбработку = Ложь;
		Элементы.ВыполнятьЧерезВнешнююОбработку.Доступность = Ложь;
	Иначе
		Элементы.ВыполнятьЧерезВнешнююОбработку.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВыбраннуюИнтеграционнуюОбработку(ИнтеграционнаяОбработка)
	
	ТекстОшибки = "";
	
	Если Не ИнтеграционнаяОбработка.Пустая() Тогда
		
		КлючПроверки = "SimpleИнтеграцияГИСМТ";
		
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка", ИнтеграционнаяОбработка);
		ПараметрыКоманды.Вставить("ИдентификаторКоманды", "ТестИнициализации");
		ПараметрыКоманды.Вставить("ОбъектыНазначения", Новый Массив());
		
		Попытка
			
			Результат = ДополнительныеОтчетыИОбработки.ВыполнитьКоманду(ПараметрыКоманды);
			
			Если Не Результат.Свойство("КлючПроверки") Или Результат.КлючПроверки <> КлючПроверки Тогда
				ВызватьИсключение "Ошибка проверки интеграционной обработки";
			КонецЕсли;
			
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(Ошибка);
			Если СтрНайти(ТекстОшибки, НСтр("ru = 'Команда ТестИнициализации не обнаружена.'")) Или
				СтрНайти(ТекстОшибки, НСтр("ru = 'Ошибка проверки интеграционной обработки'")) Тогда
				ТекстОшибки = НСтр("ru = 'Обработка не является интеграционной обработкой Simple для Честного знака!'");
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения теста интеграционной обработки:
				|%1'"), ТекстОшибки);
			КонецЕсли;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаСервере
Функция ВыполнитьКомандуОбработки(ИдентификаторКоманды, ПараметрыВыполняемойКоманды = Неопределено)
	
	ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Результат = Новый Структура();
	Результат.Вставить("Данные");
	Результат.Вставить("Ошибка", "");
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка", ПодключеннаяИнтеграционнаяОбработка);
	ПараметрыКоманды.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
	ПараметрыКоманды.Вставить("ОбъектыНазначения", Новый Массив());
	
	Если ПараметрыВыполняемойКоманды <> Неопределено Тогда
		
		Для Каждого КлючЗначение Из ПараметрыВыполняемойКоманды Цикл
			ПараметрыКоманды.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		
		Если ВыполнятьЧерезПодключеннуюОбработку Тогда
			Результат.Данные = ДополнительныеОтчетыИОбработки.ВыполнитьКоманду(ПараметрыКоманды);
		Иначе
			Результат.Данные = ДополнительныеОтчетыИОбработки.ВыполнитьКомандуИзФормыВнешнегоОбъекта(
				ПараметрыКоманды.ИдентификаторКоманды, ПараметрыКоманды, ЭтотОбъект);
		КонецЕсли;
		
	Исключение
		Результат.Ошибка = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	РазницаВремени = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачало;
	ЗатраченноеВремяПредставление = ПолучитьПредставлениеРазницыВремени(РазницаВремени, Истина);
	ЗатраченноеВремяПредставление = СтрШаблон(НСтр("ru = 'Время выполнения: %1'"), ЗатраченноеВремяПредставление);
	
	ОбщегоНазначения.СообщитьПользователю(ЗатраченноеВремяПредставление);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеРазницыВремени(РазницаВремени, ВремяВМилисекундах = Ложь)
	
	РазмерЧаса = 3600;
	РазмерМинуты = 60;
	РазмерСекунды = 1;
	
	Если ВремяВМилисекундах Тогда
		
		РазмерЧаса = РазмерЧаса * 1000;
		РазмерМинуты = РазмерМинуты * 1000;
		РазмерСекунды = РазмерСекунды * 1000;
		
	КонецЕсли;
	
	Часов = Цел(РазницаВремени / РазмерЧаса);
	Минут = Цел((РазницаВремени - (Часов * РазмерЧаса)) / РазмерМинуты);
	Секунд = Цел((РазницаВремени - ((Часов * РазмерЧаса) + (Минут * РазмерМинуты))) / РазмерСекунды);
	
	Если ВремяВМилисекундах Тогда
		Милисекунд = РазницаВремени - ((Часов * РазмерЧаса) + (Минут * РазмерМинуты) + (Секунд * РазмерСекунды));
	Иначе
		Милисекунд = Цел((РазницаВремени - ((Часов * РазмерЧаса) + (Минут * РазмерМинуты) + (Секунд * РазмерСекунды))) * 1000);
	КонецЕсли;
	
	Время = Новый Массив();
	
	Если РазницаВремени >= РазмерЧаса Тогда
		Время.Добавить(СтрШаблон(НСтр("ru = '%1 ч.'"), Формат(Часов, "ЧГ=0;")));
	КонецЕсли;
	
	Если РазницаВремени >= РазмерМинуты Тогда
		Время.Добавить(СтрШаблон(НСтр("ru = '%1 м.'"), Формат(Минут, "ЧГ=0;")));
	КонецЕсли;
	
	Если РазницаВремени >= РазмерСекунды и Секунд > 0 Тогда
		Время.Добавить(СтрШаблон(НСтр("ru = '%1 с.'"), Формат(Секунд, "ЧГ=0;")));
	КонецЕсли;
	
	Если Милисекунд > 0 и РазницаВремени <= РазмерСекунды Тогда
		Время.Добавить(СтрШаблон(НСтр("ru = '%1 мс.'"), Формат(Милисекунд, "ЧГ=0;")));
	КонецЕсли;
	
	Если Время.Количество() > 0 Тогда
		Время = СтрСоединить(Время, " ");
	Иначе
		Время = НСтр("ru = '0 секунд'");
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

&НаСервере
Функция ВыполнитьЗапросСоставаКодовМаркировкиНаСервере()
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Штрихкоды", ШтрихкодыКЗапросуСоставаКМ.ВыгрузитьЗначения());
	
	РезультатВыполнения = ВыполнитьКомандуОбработки("ЗапросСоставаКодовМаркировки", ПараметрыКоманды);
	
	Если РезультатВыполнения.Данные <> Неопределено Тогда
		
		Попытка
			РезультатВыполнения.Данные = ЗначениеВJSON(РезультатВыполнения.Данные.СоставКодовМаркировки);
		Исключение
			РезультатВыполнения.Ошибка = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеВJSON(Знач Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуЗависимостейКомандыЗапросСоставаКМНаСервере()
	
	РезультатВыполнения = ВыполнитьКомандуОбработки("ПроверкаИспользованияКомандыЗапросСоставаКодовМаркировки");
	
	Если РезультатВыполнения.Данные <> Неопределено Тогда
		
		Если РезультатВыполнения.Данные.Ошибки.Количество() > 0 Тогда
			РезультатВыполнения.Ошибка = СтрСоединить(РезультатВыполнения.Данные.Ошибки, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ВыполнитьЗапросВложенностиУпаковокНаСервере()
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Упаковки", УпаковкиКЗапросуВложенности.ВыгрузитьЗначения());
	ПараметрыКоманды.Вставить("СоздаватьШтрихкодыУпаковок", СоздаватьШтрихкодыУпаковок);
	ПараметрыКоманды.Вставить("СоздаватьШтрихкодыУпаковокСтандартнымСпособом", СоздаватьШтрихкодыУпаковокСтандартнымСпособом);
	
	РезультатВыполнения = ВыполнитьКомандуОбработки("ПолучитьВложенныеШтрихкодыУпаковок", ПараметрыКоманды);
	
	Если РезультатВыполнения.Данные <> Неопределено Тогда
		
		Попытка
			МассивВложенныеШтрихкоды = ОбщегоНазначения.СкопироватьРекурсивно(РезультатВыполнения.Данные.ВложенныеШтрихкоды);
			ЗапросВложенностиУпаковок_ПривестиВложенныеШтрихкодыКПростымТипам(МассивВложенныеШтрихкоды);
			РезультатВыполнения.Данные = ЗначениеВJSON(МассивВложенныеШтрихкоды);
		Исключение
			РезультатВыполнения.Ошибка = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗапросВложенностиУпаковок_ПривестиВложенныеШтрихкодыКПростымТипам(ВложенныеШтрихкоды)
	
	Для индекс = 0 По ВложенныеШтрихкоды.ВГраница() Цикл
		
		Для Каждого КлючЗначение Из ВложенныеШтрихкоды[индекс] Цикл
			
			Если КлючЗначение.Ключ = "ВложенныеШтрихкоды" Тогда
				ЗапросВложенностиУпаковок_ПривестиВложенныеШтрихкодыКПростымТипам(КлючЗначение.Значение);
			Иначе
				ВложенныеШтрихкоды[индекс].Вставить(КлючЗначение.Ключ, Строка(КлючЗначение.Значение));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
